using System;
using System.Reflection.Metadata.Ecma335;

partial class Program
{
    // Проверка на валидные входные данные.
    private static bool ValidateData(int day, int month, int year)
    {
        if (day >= 1 && day <= 31 && month >= 1 && month <= 12 && year >= 1701 && year <= 1800)
        {
            if (day == 30 && month == 2 || day == 31 && month == 2 || day == 31 && month == 4 || day == 31 && month == 6
                || day == 31 && month == 9 || day == 31 && month == 11)
                return false;
            return true;
        }
        return false;
       
    }

    /// <summary>
    /// Получение дня недели
    /// </summary>
    /// <param name="day"></param>
    /// <param name="month"></param>
    /// <param name="year"></param>
    /// <returns>Возвращает число от 1 до 7, где 1 - понедельник, и т.д. </returns>
    private static int GetDayOfWeek(int day, int month, int year)
    {
        int result = 0, y_year = 0, tmp;
        int[] m_month = new int[] { 6, 2, 2, 6, 0, 3, 5, 1, 4, 6, 2, 4 };
        tmp = year;
        while (y_year == 0 && year != 1800)
        {
            if (tmp % 4 == 0)
                y_year = tmp;
            tmp--;
        }
        y_year = (50 - y_year / 2 + year % 100 - y_year);
        result = (day + m_month[month - 1] + y_year) % 7;
        if (year % 4 == 0 && (month == 1 || month == 2) && year != 1800)
            result = (day + m_month[month - 1] + y_year - 1) % 7;
        return result;

    }

    private static string GetDateOfFriday(int dateOfWeek, int day, int month, int year)
    {
        int new_day;
        //Вычисление дня.
        new_day = 5 - GetDayOfWeek(day, month, year);
        if (new_day < 0)
            new_day += 7;
        new_day += day;
        //Вычисление месяца.
        if (new_day >= 31)
        {
            if(day == 31 && month == 2 || day == 31 && month == 4 || day == 31 && month == 6
                || day == 31 && month == 9 || day == 31 && month == 11)
            {
                if (day == 30 && month == 2)
                {
                    month++;
                    new_day -= 29;
                }
                else
                {
                    month++;
                    new_day -= 30;
                }

            }
            else
            {
                month++;
                new_day -= 31;
            }
        }
        // Вычисление года.
        if (month > 12)
        {
            year++;
            month -= 12;
        }
        return GetFormatMessage(new_day, month, year);
    }
}


partial class Program
{
    private const int MinYear = 1701;
    private const int MaxYear = 1800;

    private static string GetFormatMessage(int day, int month, int year)
    {
        return String.Format("{0:D2}.{1:D2}.{2:D4}", day, month, year);
    }

    private static void Main(string[] args)
    {
        int day = int.Parse(Console.ReadLine());
        int month = int.Parse(Console.ReadLine());
        int year = int.Parse(Console.ReadLine());

        if (!ValidateData(day, month, year))
        {
            Console.WriteLine("Incorrect input");
            return;
        }

        int dateOfWeek = GetDayOfWeek(day, month, year);

        string outputMessage = GetDateOfFriday(dateOfWeek, day, month, year);

        Console.WriteLine(outputMessage);
    }
}
